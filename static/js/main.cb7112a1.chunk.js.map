{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","emailEditorRef","useRef","useState","inputData","setInputData","outputData","setOuputData","designbody","setDesignBody","onload","data","design","current","editor","loadDesign","style","maxWidth","padding","margin","TextArea","width","height","onChange","e","console","log","target","value","JSON","parse","onClick","ref","onLoad","textAlign","display","type","preventDefault","exportHtml","html","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0MAiJeA,EA5IH,WACV,IAAMC,EAAiBC,mBAEvB,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAmCF,mBAAS,IAA5C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAAoCJ,mBAAS,IAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KAEMC,EAAS,SAACC,GACd,GAAIA,EAAM,CACR,IAAMC,EAASD,EACfV,EAAeY,QAAQC,OAAOC,WAAWH,KA8D7C,OACE,mCACE,gCACE,sBACEI,MAAO,CAAEC,SAAU,SAAUC,QAAS,YAAaC,OAAQ,UAD7D,UAGE,cAAC,IAAMC,SAAP,CACEJ,MAAO,CACLK,MAAO,OACPH,QAAS,YACTC,OAAQ,SACRG,OAAQ,SAEVC,SAxEW,SAACC,GACpBC,QAAQC,IAAIF,EAAEG,OAAOC,OACrB,IAAMjB,EAAOkB,KAAKC,MAAMN,EAAEG,OAAOC,OACjCvB,EAAaM,MAuEP,8BACE,cAAC,IAAD,CAAQoB,QArEE,WAClBtB,EAAc,IACdF,EAAa,IACbG,EAAON,IAkEC,+BAGJ,gCACE,8BACE,cAAC,IAAD,CAAa4B,IAAK/B,EAAgBgC,OAAQvB,MAE5C,qBACEM,MAAO,CAAEkB,UAAW,MAAOC,QAAS,OAAQjB,QAAS,aADvD,SAGE,cAAC,IAAD,CACEkB,KAAK,UACLpB,MAAO,CAAEC,SAAU,SACnBc,QA5Ea,SAACP,GACxBA,EAAEa,iBACFpC,EAAeY,QAAQC,OAAOwB,YAAW,SAAC3B,GACxC,IAAQC,EAAiBD,EAAjBC,OAAQ2B,EAAS5B,EAAT4B,KAChBd,QAAQC,IAAId,GACZL,EAAagC,GAEb9B,EAAcoB,KAAKW,UAAU5B,QAkEvB,gCASJ,sBACEI,MAAO,CACLC,SAAU,SACVC,QAAS,YACTC,OAAQ,aAJZ,UAOE,cAAC,IAAMC,SAAP,CACEJ,MAAO,CACLK,MAAO,OACPH,QAAS,YACTC,OAAQ,SACRG,OAAQ,SAEVM,MAAOtB,IAGT,8CACA,cAAC,IAAMc,SAAP,CACEJ,MAAO,CACLK,MAAO,OACPH,QAAS,YACTC,OAAQ,SACRG,OAAQ,SAEVM,MAAOpB,aC7HJiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.cb7112a1.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\n\nimport EmailEditor from 'react-email-editor';\nimport { Button, Input } from 'antd';\n\nconst App = () => {\n  const emailEditorRef = useRef();\n\n  const [inputData, setInputData] = useState('');\n  const [outputData, setOuputData] = useState('');\n  const [designbody, setDesignBody] = useState('');\n\n  const onload = (data) => {\n    if (data) {\n      const design = data;\n      emailEditorRef.current.editor.loadDesign(design);\n    }\n  };\n  const handleChange = (e) => {\n    console.log(e.target.value);\n    const data = JSON.parse(e.target.value);\n    setInputData(data);\n  };\n\n  const InputHandle = () => {\n    setDesignBody('');\n    setOuputData('');\n    onload(inputData);\n  };\n\n  const handleSaveSubmit = (e) => {\n    e.preventDefault();\n    emailEditorRef.current.editor.exportHtml((data) => {\n      const { design, html } = data;\n      console.log(design);\n      setOuputData(html);\n\n      setDesignBody(JSON.stringify(design));\n      /* if (saveORTest) {\n        const body = {\n          templateHtml: html,\n          email_subject: saveData.email_subject,\n          template_name: saveData.template_name,\n          email_text: JSON.stringify(design),\n        };\n        DataService.put(`emails/update-email`, body)\n          .then((res) => {\n            setData({ ...data, LoadingSubmit: false });\n            popup();\n            setTimeout(() => {\n              history.push('/admin/email');\n            }, 2000);\n          })\n          .catch((err) => {\n            setData({ ...data, LoadingSubmit: false });\n          });\n      } else {\n        const body = {\n          text_json: JSON.stringify(design),\n          templateHtml: html,\n          email: testData.email,\n          subject: testData.test_subject,\n        };\n        DataService.post(`emails/test-email`, body)\n          .then((res) => {\n            popup();\n            setTimeout(() => {\n              setData({ ...data, LoadingSubmit: false });\n            }, 2000);\n          })\n          .catch((err) => {\n            setData({ ...data, LoadingSubmit: false });\n          });\n      } */\n    });\n  };\n\n  return (\n    <>\n      <div>\n        <div\n          style={{ maxWidth: '1140px', padding: '10px 30px', margin: '0 auto' }}\n        >\n          <Input.TextArea\n            style={{\n              width: '100%',\n              padding: '10px 30px',\n              margin: '0 auto',\n              height: '200px',\n            }}\n            onChange={handleChange}\n          />\n          <div>\n            <Button onClick={InputHandle}>Input Design</Button>\n          </div>\n        </div>\n        <div>\n          <div>\n            <EmailEditor ref={emailEditorRef} onLoad={onload} />\n          </div>\n          <div\n            style={{ textAlign: 'end', display: 'flex', padding: '10px 30px' }}\n          >\n            <Button\n              type='primary'\n              style={{ maxWidth: '200px' }}\n              onClick={handleSaveSubmit}\n            >\n              Output design\n            </Button>\n          </div>\n        </div>\n        <div\n          style={{\n            maxWidth: '1140px',\n            padding: '10px 30px',\n            margin: '20px auto',\n          }}\n        >\n          <Input.TextArea\n            style={{\n              width: '100%',\n              padding: '10px 30px',\n              margin: '0 auto',\n              height: '200px',\n            }}\n            value={outputData}\n          />\n\n          <div>design Body</div>\n          <Input.TextArea\n            style={{\n              width: '100%',\n              padding: '10px 30px',\n              margin: '0 auto',\n              height: '200px',\n            }}\n            value={designbody}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}